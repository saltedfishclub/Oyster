/*
 *
 *     Oyster - The universal minigame framework for spigot servers.
 *     Copyright (C) 2021 SaltedFish Club
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 *     USA
 */

import org.apache.tools.ant.filters.ReplaceTokens

import java.util.zip.ZipFile
import java.util.zip.ZipInputStream

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

group = 'cc.sfclub.game'
version = '0.1.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        name = "Lss233's Repository"
        url = 'https://lss233.littleservice.cn/repositories/minecraft/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.jetbrains:annotations:21.0.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}
task generateI18NBundle(type: Zip,dependsOn: processResources) {
    from 'translation'
    archiveName 'locale.zip'
    destinationDir file('build/resources/i18n/')
}

jar.dependsOn generateI18NBundle
jar {
    from ("build/resources/i18n")
}
def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 7
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}
def buildDate = new Date().toGMTString()
def buildBy = System.getProperty("user.name")
def commitHash = getCheckedOutGitCommitHash()

processResources {

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy DuplicatesStrategy.INCLUDE
        filter ReplaceTokens, tokens: [
                version: version,
                buildDate: buildDate,
                buildBy: (buildBy.equals("runner") || buildBy.equals("icybear"))?buildBy:"Unknown",
                commitHash: commitHash
        ]
    }
}
